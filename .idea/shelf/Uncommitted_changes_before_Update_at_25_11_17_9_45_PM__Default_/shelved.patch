Index: app/src/main/AndroidManifest.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"utf-8\"?>\n<manifest xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    package=\"com.carehack.medivault\">\n    <uses-permission android:name=\"android.permission.MODIFY_AUDIO_SETTINGS\"/>\n    <uses-permission android:name=\"android.permission.RECORD_AUDIO\"/>\n    <uses-permission android:name=\"android.permission.INTERNET\"/>\n    <uses-permission android:name=\"android.permission.ACCESS_NETWORK_STATE\"/>\n    <application\n        android:allowBackup=\"true\"\n        android:icon=\"@mipmap/ic_launcher\"\n        android:label=\"@string/app_name\"\n        android:roundIcon=\"@mipmap/ic_launcher_round\"\n        android:supportsRtl=\"true\"\n        android:theme=\"@style/AppTheme\">\n        <activity\n            android:name=\".LoginActivity\"\n            android:noHistory=\"true\">\n            <intent-filter>\n                <action android:name=\"android.intent.action.MAIN\" />\n\n                <category android:name=\"android.intent.category.LAUNCHER\" />\n            </intent-filter>\n        </activity>\n        <activity\n            android:name=\".RegisterActivity\"\n            android:noHistory=\"true\" />\n        <activity android:name=\".MainActivity\"\n            android:theme=\"@style/AppTheme.Main\"/>\n        <activity android:name=\".DoctorMainActivity\" />\n        <activity android:name=\".ListenActivity\"></activity>\n        <activity android:name=\".ProfileDetails\"></activity>\n    </application>\n\n</manifest>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/AndroidManifest.xml	(revision da2efa0e9518071e0b8ead5e308bdcb219506341)
+++ app/src/main/AndroidManifest.xml	(revision )
@@ -1,10 +1,12 @@
 <?xml version="1.0" encoding="utf-8"?>
 <manifest xmlns:android="http://schemas.android.com/apk/res/android"
     package="com.carehack.medivault">
-    <uses-permission android:name="android.permission.MODIFY_AUDIO_SETTINGS"/>
-    <uses-permission android:name="android.permission.RECORD_AUDIO"/>
-    <uses-permission android:name="android.permission.INTERNET"/>
-    <uses-permission android:name="android.permission.ACCESS_NETWORK_STATE"/>
+
+    <uses-permission android:name="android.permission.MODIFY_AUDIO_SETTINGS" />
+    <uses-permission android:name="android.permission.RECORD_AUDIO" />
+    <uses-permission android:name="android.permission.INTERNET" />
+    <uses-permission android:name="android.permission.ACCESS_NETWORK_STATE" />
+
     <application
         android:allowBackup="true"
         android:icon="@mipmap/ic_launcher"
@@ -24,10 +26,12 @@
         <activity
             android:name=".RegisterActivity"
             android:noHistory="true" />
-        <activity android:name=".MainActivity"
-            android:theme="@style/AppTheme.Main"/>
+        <activity
+            android:name=".MainActivity"
+            android:theme="@style/AppTheme.Main" />
         <activity android:name=".DoctorMainActivity" />
-        <activity android:name=".ListenActivity"></activity>
+        <activity android:name=".ListenActivity" />
+        <activity android:name=".EmitActivity"></activity>
         <activity android:name=".ProfileDetails"></activity>
     </application>
 
Index: app/src/main/java/com/carehack/medivault/LoginActivity.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.carehack.medivault;\n\nimport android.app.Dialog;\nimport android.content.Intent;\nimport android.content.SharedPreferences;\nimport android.os.Bundle;\nimport android.support.annotation.NonNull;\nimport android.support.design.widget.TextInputEditText;\nimport android.support.v7.app.AppCompatActivity;\nimport android.text.TextUtils;\nimport android.util.Log;\nimport android.view.View;\nimport android.widget.Button;\nimport android.widget.ProgressBar;\nimport android.widget.TextView;\n\nimport com.google.android.gms.tasks.OnCompleteListener;\nimport com.google.android.gms.tasks.Task;\nimport com.google.firebase.FirebaseException;\nimport com.google.firebase.FirebaseTooManyRequestsException;\nimport com.google.firebase.auth.AuthResult;\nimport com.google.firebase.auth.FirebaseAuth;\nimport com.google.firebase.auth.FirebaseAuthInvalidCredentialsException;\nimport com.google.firebase.auth.FirebaseUser;\nimport com.google.firebase.auth.PhoneAuthCredential;\nimport com.google.firebase.auth.PhoneAuthProvider;\nimport com.google.firebase.database.DataSnapshot;\nimport com.google.firebase.database.DatabaseError;\nimport com.google.firebase.database.DatabaseReference;\nimport com.google.firebase.database.FirebaseDatabase;\nimport com.google.firebase.database.ValueEventListener;\n\nimport java.util.concurrent.TimeUnit;\nimport java.util.regex.Matcher;\nimport java.util.regex.Pattern;\n\n/**\n * This activity will be the first activity where the\n * user can register his phone number.\n */\npublic class LoginActivity extends AppCompatActivity {\n\n\n    private static final String TAG = \"LoginActivity\";\n    // UI references.\n    private TextInputEditText mPhoneView;\n    private PhoneAuthProvider.OnVerificationStateChangedCallbacks mCallbacks;\n    private PhoneAuthProvider.ForceResendingToken mResendToken;\n    private String mVerificationId, code;\n    private FirebaseAuth mAuth;\n    private DatabaseReference mRef;\n    private SharedPreferences sharedPreferences;\n    private SharedPreferences.Editor editor;\n    private Button mEmailSignInButton;\n    private ProgressBar progressBar;\n    private boolean otpsent = false;\n    private PhoneAuthCredential credential;\n    private TextView textView;\n    private Button btn;\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n\n        super.onCreate(savedInstanceState);\n        sharedPreferences = getSharedPreferences(Utils.pref, MODE_PRIVATE);\n        editor = sharedPreferences.edit();\n        if (sharedPreferences.contains(\"uid\")) {\n            String role = sharedPreferences.getString(\"role\",null);\n            startActivityBasedOnRole(role);\n        }\n        setContentView(R.layout.activity_login);\n        mPhoneView = findViewById(R.id.edit_text_phone_number);\n        mEmailSignInButton = findViewById(R.id.btn_next);\n        textView = findViewById(R.id.textView);\n        progressBar = findViewById(R.id.progressbar);\n        mAuth = FirebaseAuth.getInstance();\n        mRef = FirebaseDatabase.getInstance().getReference();\n        //Go To Booking Activity\n\n        //end-Go To Booking Activity\n        mEmailSignInButton.setOnClickListener(new View.OnClickListener() {\n            @Override\n            public void onClick(View view) {\n                if (!otpsent)\n                    createDialog();\n                else\n                    signInWithPhoneAuthCredential(credential);\n            }\n        });\n    }\n\n\n    private void createDialog() {\n        final Dialog dialog = new Dialog(LoginActivity.this);\n        dialog.setContentView(R.layout.dialog_login);\n        dialog.show();\n        TextView phone_text = dialog.findViewById(R.id.phone_textview);\n        phone_text.setText(\"+91 \" + mPhoneView.getText().toString());\n        Button edit = dialog.findViewById(R.id.btn_edit);\n        Button ok = dialog.findViewById(R.id.btn_ok);\n        edit.setOnClickListener(new View.OnClickListener() {\n            @Override\n            public void onClick(View v) {\n                if (dialog.isShowing()) {\n                    dialog.dismiss();\n                }\n            }\n        });\n        ok.setOnClickListener(new View.OnClickListener() {\n            @Override\n            public void onClick(View v) {\n                if (dialog.isShowing()) {\n                    findViewById(R.id.textInputLayout).setVisibility(View.GONE);\n                    dialog.dismiss();\n                    attemptLogin();\n                }\n            }\n        });\n    }\n\n\n    private void attemptLogin() {\n\n        // Reset errors.\n        mPhoneView.setError(null);\n\n        // Store values at the time of the login attempt.\n        String phone = mPhoneView.getText().toString();\n\n        boolean cancel = false;\n        View focusView = null;\n\n\n        // Check for a valid phone\n        if (TextUtils.isEmpty(phone)) {\n            mPhoneView.setError(getString(R.string.error_field_required));\n            focusView = mPhoneView;\n            cancel = true;\n        } else if (!isPhoneValid(phone)) {\n            mPhoneView.setError(getString(R.string.error_invalid_email));\n            focusView = mPhoneView;\n            cancel = true;\n        }\n\n        if (cancel) {\n            // There was an error; don't attempt login and focus the first\n            // form field with an error.\n            focusView.requestFocus();\n        } else {\n            mCallbacks = new PhoneAuthProvider.OnVerificationStateChangedCallbacks() {\n\n                @Override\n                public void onVerificationCompleted(final PhoneAuthCredential credential) {\n                    // This callback will be invoked in two situations:\n                    // 1 - Instant verification. In some cases the phone number can be instantly\n                    //     verified without needing to send or enter a verification code.\n                    // 2 - Auto-retrieval. On some devices Google Play services can automatically\n                    //     detect the incoming verification SMS and perform verificaiton without\n                    //     user action.\n                    Log.d(TAG, \"onVerificationCompleted:\" + credential);\n                    LoginActivity.this.credential = credential;\n                    otpsent = true;\n                    signInWithPhoneAuthCredential(credential);\n\n                }\n\n                @Override\n                public void onVerificationFailed(FirebaseException e) {\n                    // This callback is invoked in an invalid request for verification is made,\n                    // for instance if the the phone number format is not valid.\n                    Log.w(TAG, \"onVerificationFailed\", e);\n                    progressBar.setVisibility(View.GONE);\n                    if (e instanceof FirebaseAuthInvalidCredentialsException) {\n                        // Invalid request\n                        // ...\n                    } else if (e instanceof FirebaseTooManyRequestsException) {\n                        // The SMS quota for the project has been exceeded\n                        // ...\n                    }\n\n                    // Show a message and update the UI\n                    // ...\n                }\n\n                @Override\n                public void onCodeSent(String verificationId,\n                                       PhoneAuthProvider.ForceResendingToken token) {\n                    // The SMS verification code has been sent to the provided phone number, we\n                    // now need to ask the user to enter the code and then construct a credential\n                    // by combining the code with a verification ID.\n                    Log.d(TAG, \"onCodeSent:\" + verificationId);\n\n                    // Save verification ID and resending token so we can use them later\n                    mVerificationId = verificationId;\n                    mResendToken = token;\n                    otpsent = false;\n\n                }\n            };\n\n            progressBar.setVisibility(View.VISIBLE);\n            mEmailSignInButton.setVisibility(View.GONE);\n            textView.setText(\"Verifying OTP\");\n\n            PhoneAuthProvider.getInstance().verifyPhoneNumber(\n                    phone,        // Phone number to verify\n                    60,                 // Timeout duration\n                    TimeUnit.SECONDS,   // Unit of timeout\n                    this,               // Activity (for callback binding)\n                    mCallbacks);\n        }\n    }\n\n\n    private void signInWithPhoneAuthCredential(PhoneAuthCredential credential) {\n        progressBar.setVisibility(View.VISIBLE);\n            textView.setText(\"Signing In\");\n            mAuth.signInWithCredential(credential)\n                    .addOnCompleteListener(this, new OnCompleteListener<AuthResult>() {\n                        @Override\n                        public void onComplete(@NonNull Task<AuthResult> task) {\n                            if (task.isSuccessful()) {\n                                // Sign in success, update UI with the signed-in user's information\n                                Log.d(TAG, \"signInWithCredential:success\");\n                                final FirebaseUser user = task.getResult().getUser();\n                                mRef = FirebaseDatabase.getInstance().getReference();\n                                mRef.child(\"Users\").child(user.getPhoneNumber()).addListenerForSingleValueEvent(new ValueEventListener() {\n                                    @Override\n                                    public void onDataChange(final DataSnapshot dataSnapshot) {\n                                        final String role = dataSnapshot.child(\"Role\").getValue(String.class);\n                                        editor.putString(\"phone\", user.getPhoneNumber());\n                                        editor.putString(\"uid\", user.getUid());\n                                        editor.putString(\"role\", role);\n                                        editor.commit();\n                                        if(!dataSnapshot.hasChild(\"UID\")) {\n                                            mRef.child(\"Users\").child(user.getPhoneNumber()).child(\"UID\").setValue(user.getUid(), new DatabaseReference.CompletionListener() {\n                                                @Override\n                                                public void onComplete(DatabaseError\n                                                                               databaseError, DatabaseReference databaseReference) {\n                                                    startActivityBasedOnRole(role);\n                                                }\n                                            });\n                                        }\n                                        else\n                                        {\n                                            startActivityBasedOnRole(role);\n                                        }\n                                    }\n\n                                    @Override\n                                    public void onCancelled(DatabaseError databaseError) {\n\n                                    }\n                                });\n\n                            } else {\n                                // Sign in failed, display a message and update the UI\n                                progressBar.setVisibility(View.GONE);\n                                Log.w(TAG, \"signInWithCredential:failure\", task.getException());\n                                if (task.getException() instanceof FirebaseAuthInvalidCredentialsException) {\n                                    // The verification code entered was invalid\n                                }\n                            }\n                        }\n                    });\n    }\n\n    private void startActivityBasedOnRole(String role) {\n        if(role!=null)\n        {\n            if(role.equals(\"Doctor\"))\n                startActivity(new Intent(LoginActivity.this,DoctorMainActivity.class));\n            else if(role.equals(\"User\")) {\n                if(sharedPreferences.contains(\"address\")) {\n                    startActivity(new Intent(LoginActivity.this, MainActivity.class));\n                    finish();\n                }\n                else {\n                    startActivity(new Intent(LoginActivity.this, RegisterActivity.class));\n                }\n            }\n        }\n\n    }\n\n    private boolean isPhoneValid(String phone) {\n            return phone.length() == 10;\n    }\n\n\n    private String parseCode(String message) {\n        Pattern p = Pattern.compile(\"\\\\b\\\\d{6}\\\\b\");\n        Matcher m = p.matcher(message);\n        String code = \"\";\n        while (m.find()) {\n            code = m.group(0);\n        }\n        Log.d(\"CODE\", code);\n        return code;\n    }\n\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/carehack/medivault/LoginActivity.java	(revision da2efa0e9518071e0b8ead5e308bdcb219506341)
+++ app/src/main/java/com/carehack/medivault/LoginActivity.java	(revision )
@@ -268,7 +268,7 @@
         if(role!=null)
         {
             if(role.equals("Doctor"))
-                startActivity(new Intent(LoginActivity.this,DoctorMainActivity.class));
+                startActivity(new Intent(LoginActivity.this,EmitActivity.class));
             else if(role.equals("User")) {
                 if(sharedPreferences.contains("address")) {
                     startActivity(new Intent(LoginActivity.this, MainActivity.class));
Index: .idea/misc.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project version=\"4\">\n  <component name=\"NullableNotNullManager\">\n    <option name=\"myDefaultNullable\" value=\"android.support.annotation.Nullable\" />\n    <option name=\"myDefaultNotNull\" value=\"android.support.annotation.NonNull\" />\n    <option name=\"myNullables\">\n      <value>\n        <list size=\"4\">\n          <item index=\"0\" class=\"java.lang.String\" itemvalue=\"org.jetbrains.annotations.Nullable\" />\n          <item index=\"1\" class=\"java.lang.String\" itemvalue=\"javax.annotation.Nullable\" />\n          <item index=\"2\" class=\"java.lang.String\" itemvalue=\"edu.umd.cs.findbugs.annotations.Nullable\" />\n          <item index=\"3\" class=\"java.lang.String\" itemvalue=\"android.support.annotation.Nullable\" />\n        </list>\n      </value>\n    </option>\n    <option name=\"myNotNulls\">\n      <value>\n        <list size=\"4\">\n          <item index=\"0\" class=\"java.lang.String\" itemvalue=\"org.jetbrains.annotations.NotNull\" />\n          <item index=\"1\" class=\"java.lang.String\" itemvalue=\"javax.annotation.Nonnull\" />\n          <item index=\"2\" class=\"java.lang.String\" itemvalue=\"edu.umd.cs.findbugs.annotations.NonNull\" />\n          <item index=\"3\" class=\"java.lang.String\" itemvalue=\"android.support.annotation.NonNull\" />\n        </list>\n      </value>\n    </option>\n  </component>\n  <component name=\"ProjectRootManager\" version=\"2\" languageLevel=\"JDK_1_8\" project-jdk-name=\"1.8\" project-jdk-type=\"JavaSDK\">\n    <output url=\"file://$PROJECT_DIR$/build/classes\" />\n  </component>\n  <component name=\"ProjectType\">\n    <option name=\"id\" value=\"Android\" />\n  </component>\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- .idea/misc.xml	(revision da2efa0e9518071e0b8ead5e308bdcb219506341)
+++ .idea/misc.xml	(revision )
@@ -24,7 +24,7 @@
       </value>
     </option>
   </component>
-  <component name="ProjectRootManager" version="2" languageLevel="JDK_1_8" project-jdk-name="1.8" project-jdk-type="JavaSDK">
+  <component name="ProjectRootManager" version="2" languageLevel="JDK_1_7" project-jdk-name="1.8" project-jdk-type="JavaSDK">
     <output url="file://$PROJECT_DIR$/build/classes" />
   </component>
   <component name="ProjectType">
